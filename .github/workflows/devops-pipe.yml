name: Blazor Production Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Permissões necessárias
permissions:
  contents: write    # permitir criar tags/commits
  packages: write    # publicar imagens no GHCR

env:
  IMAGE_REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}
  IMAGE_NAME: ${{ github.event.repository.name }}
  K8S_VALUES: k8s/values.yaml
  CHART_FILE: k8s/Chart.yaml

jobs:
  # ------------------------------
  # 1) build + test
  # ------------------------------
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      # opcionalmente exportar artefatos, mas não precisamos da tag aqui
      built: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore

      - name: Test
        run: dotnet test --no-build --verbosity normal

  # ------------------------------
  # 2) semantic-release (gera tag vX.Y.Z)
  # ------------------------------
  semantic-release:
    needs: build-and-test
    runs-on: ubuntu-latest
    outputs:
      IMAGE_TAG: ${{ steps.get_tag.outputs.IMAGE_TAG }}
      IMAGE_FULL: ${{ steps.get_tag.outputs.IMAGE_FULL }}
    steps:
      - name: Checkout (full history & tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '22'    # ajuste se preferir outra versão LTS

      - name: Install semantic-release + plugins
        run: |
          npm install --no-audit --no-fund \
            semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/changelog \
            @semantic-release/git \
            @semantic-release/github

      - name: Run semantic-release (determine version, create tag & GitHub release)
        id: semrel
        env:
          # GITHUB_TOKEN geralmente funciona; se estiver usando PAT, troque aqui
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GIT_AUTHOR_IDENT optional, evita commits com email desconhecido
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: |
          # semantic-release vai ler configuração default ou .releaserc
          npx semantic-release --no-ci || (echo "semantic-release failed" && exit 1)

      - name: Get latest tag created by semantic-release
        id: get_tag
        run: |
          # pega a última tag anotada (ex: v1.2.3)
          # fetch pode ser necessário para garantir tags locais
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "LATEST_TAG=${LATEST_TAG}"
          # remove leading 'v' para a tag da imagem (se preferir manter 'v' remova a linha abaixo)
          IMAGE_TAG=${LATEST_TAG#v}
          IMAGE_FULL=${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_FULL=$IMAGE_FULL" >> $GITHUB_OUTPUT

  # ------------------------------
  # 3) build & push image (usa tag semver)
  # ------------------------------
  build-and-push-image:
    needs: semantic-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for Docker context)
        uses: actions/checkout@v4

      - name: Set up QEMU (for buildx)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push image (tag semver + latest)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ needs.semantic-release.outputs.IMAGE_FULL }}
            ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAMESPACE }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            DOTNET_ENV=Production

      - name: Echo image info
        run: |
          echo "Image pushed: ${{ needs.semantic-release.outputs.IMAGE_FULL }}"

  
  # ------------------------------
  # 4) Update Helm values & Chart and commit back
  # ------------------------------
  update-helm-and-commit:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (with write perms)
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
  
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Debug env & files
        run: |
          echo "REF_NAME=${{ github.ref_name }}"
          echo "IMAGE_TAG (from semantic-release) = '${{ needs.semantic-release.outputs.IMAGE_TAG }}'"
          echo "IMAGE_FULL = '${{ needs.semantic-release.outputs.IMAGE_FULL }}'"
          echo "---- k8s/values.yaml BEFORE ----"
          sed -n '1,200p' k8s/values.yaml || echo "(no file)"
        shell: bash
      
      - name: Sync with remote branch (include commits from semantic-release)
        run: |
          git fetch origin +refs/heads/${{ github.ref_name }}:refs/remotes/origin/${{ github.ref_name }} --tags
          git reset --hard origin/${{ github.ref_name }}
        shell: bash
      

      - name: Install PyYAML
        run: python -m pip install --upgrade pip PyYAML
  
      - name: Ensure script exists & is executable
        run: |
          ls -la scripts || true
          chmod +x scripts/update_helm.py || true
  
      - name: Update Helm values.yaml and Chart.yaml with new semver tag
        id: update_yaml
        run: |
          IMAGE_TAG="${{ needs.semantic-release.outputs.IMAGE_TAG }}"
          IMAGE_FULL="${{ needs.semantic-release.outputs.IMAGE_FULL }}"
          echo "Updating ${K8S_VALUES} and ${CHART_FILE} -> ${IMAGE_TAG}"
          python scripts/update_helm.py \
            --values "${{ env.K8S_VALUES }}" \
            --chart "${{ env.CHART_FILE }}" \
            --image-full "${IMAGE_FULL}" \
            --image-tag "${IMAGE_TAG}"
        shell: bash
  
      - name: Show resulting files (for debug)
        run: |
          echo "----- k8s/values.yaml -----"
          sed -n '1,400p' "${{ env.K8S_VALUES }}" || true
          echo "----- k8s/Chart.yaml -----"
          sed -n '1,200p' "${{ env.CHART_FILE }}" || true
  
      - name: Commit and push updated helm files
        env:
          IMAGE_TAG: "${{ needs.semantic-release.outputs.IMAGE_TAG }}"
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "${{ env.K8S_VALUES }}" "${{ env.CHART_FILE }}" || true
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore(release): update Helm to ${IMAGE_TAG}"
            git push origin HEAD:${{ github.ref_name }}
          fi
        shell: bash
